<?php


namespace App\Helpers;


use App\Helpers\BaseFileUploadHelper;
use App\Helpers\ImageUploadHelper;
use App\Query\BaseQuery;
use App\Transactors\Mutations\BaseMutator;
use Illuminate\Validation\ValidationException;

class FileUploadTransactor extends BaseTransactor
{
    /**
     * @var ImageUploadHelper Must be initialized by all those transactors that require image uploads.
     */
    protected $fileUploadHelper;

    private const BASE_FILE_UPLOAD_HELPER_ERROR = "Cant call method when image service is null";
    private const ILLEGAL_INDEX_ERROR = "Illegal array or array index format";
    public function __construct(BaseQuery $query, BaseMutator $mutator, $bulkDeleteColumn,
                                BaseFileUploadHelper $fileUploadHelper)
    {
        parent::__construct($query, $mutator, $bulkDeleteColumn);
        $this->fileUploadHelper = $fileUploadHelper;
    }

    /**
     * Persists an instance with the given
     * @param $createdById
     * @param array $args
     * @param array $files[Required]
     * @return mixed
     * @throws ValidationException
     * @throws \Throwable
     */
    public function create($createdById, array $args, array $files = null)
    {
        $urlsArray = array();
        try {
            throw_if($this->fileUploadHelper == null || $files == null, \ErrorException::class, self::BASE_FILE_UPLOAD_HELPER_ERROR);
            foreach ($files as $file) {
                array_push($urlsArray, $this->fileUploadHelper->store($file));
            }
            $args["file_urls"]["urls"] = $urlsArray;
            error_log(json_encode($args));
            return parent::create($createdById, $args); // TODO: Change the autogenerated stub
        } catch (\Exception $exception){
            foreach ($urlsArray as $files){
                $this->fileUploadHelper->delete($files);
            }
            throw $exception;
        }
    }

    /**
     * Updates and adds images to the model with the given row id
     * @param $modelId
     * @param $updatedById
     * @param array $args
     * @param $files [Optional]
     * @return int
     * @throws ValidationException
     * @throws \Throwable
     */
    public function update($modelId, $updatedById, array $args, array $files = null)
    {
        $urlsArray = $this->getURLs($modelId)["urls"];
        try {
            throw_if($this->fileUploadHelper == null, \ErrorException::class, self::BASE_FILE_UPLOAD_HELPER_ERROR);
            foreach ($files as $image) {
                if($image)
                    array_push($urlsArray, $this->fileUploadHelper->store($image));
            }
            $args["file_urls"]["urls"] = $urlsArray;
            return parent::update($modelId, $updatedById, $args, $files); // TODO: Change the autogenerated stub
        } catch (\Exception $exception){
            foreach ($urlsArray as $files){
                $this->fileUploadHelper->delete($files);
            }
            throw $exception;
        }
    }

    /**
     * @param ID $modelId
     * @param ID $deletedById
     * @param array|null $fileUrlIndex
     * @return int
     * @throws ValidationException
     * @throws \Throwable
     */
    public function delete($modelId, $deletedById, array $fileUrlIndex = null)
    {
        throw_if($this->fileUploadHelper == null, \ErrorException::class, self::BASE_FILE_UPLOAD_HELPER_ERROR);
        if($fileUrlIndex == null) // normal delete
            return parent::delete($modelId, $deletedById, $fileUrlIndex);
        else {
            // deleting img urls only
            $imgUrls = $this->getURLs($modelId)["urls"];
            $arr = $this->fileUploadHelper->deleteWithIndex($imgUrls, $fileUrlIndex[0]);
            return parent::update($modelId, $deletedById, array('file_urls'=>array('urls'=>$arr)));
        }

    }

    private function getURLs($modelId){
        return $this->query->fetchOneByCol('id', $modelId)->file_urls;
    }
}
